# Logstash 파이프라인 설정 - Spring Boot 로그 처리
# Phase 1: 애플리케이션 로그 관리용

input {
  # Spring Boot 로그 파일 읽기 (multiline 처리)
  file {
    path => "/app/logs/application*.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/sincedb_spring_logs"
    codec => multiline {
      pattern => "^\d{4}-\d{2}-\d{2}"  # 날짜로 시작하는 라인
      negate => true
      what => "previous"
      max_lines => 500
      timeout => 10
    }
    tags => ["spring-boot", "file-input"]
    type => "spring-boot-log"
  }
  
  # TCP 입력 (로그백 TCP appender에서 직접 전송)
  tcp {
    port => 5000
    codec => json_lines
    tags => ["spring-boot", "tcp-input"]
    type => "spring-boot-tcp"
  }
  
  # Beats 입력 (Filebeat 사용 시)
  beats {
    port => 5044
    tags => ["spring-boot", "beats-input"]
    type => "spring-boot-beats"
  }
}

filter {
  # Spring Boot 파일 로그 처리
  if "file-input" in [tags] {
    # Spring Boot 로그 패턴 파싱
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} +%{LOGLEVEL:level} +%{POSINT:pid} +--- +\[%{DATA:thread}\] +%{JAVACLASS:class} +: +%{GREEDYDATA:log_message}" 
      }
      tag_on_failure => ["_grokparsefailure_spring_boot"]
    }
    
    # 대안 패턴 (위 패턴이 실패할 경우)
    if "_grokparsefailure_spring_boot" in [tags] {
      grok {
        match => { 
          "message" => "%{TIMESTAMP_ISO8601:timestamp} +%{LOGLEVEL:level} +\[%{DATA:thread}\] +%{JAVACLASS:class} +: +%{GREEDYDATA:log_message}" 
        }
        remove_tag => ["_grokparsefailure_spring_boot"]
        tag_on_failure => ["_grokparsefailure_simple"]
      }
    }
    
    # 날짜 파싱 및 타임존 설정
    if [timestamp] {
      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss,SSS" ]
        timezone => "Asia/Seoul"
        target => "@timestamp"
      }
    }
  }
  
  # TCP/JSON 입력 처리
  if "tcp-input" in [tags] {
    # JSON 형태로 이미 파싱된 경우
    if [level] and [message] {
      mutate {
        rename => { "message" => "log_message" }
      }
    }
  }
  
  # 공통 필터링
  if [level] {
    # 로그 레벨별 분류 및 태그 추가
    if [level] == "ERROR" {
      mutate { 
        add_tag => ["error", "alert-worthy"]
        add_field => { "severity" => "high" }
      }
    } else if [level] == "WARN" {
      mutate { 
        add_tag => ["warning"]
        add_field => { "severity" => "medium" }
      }
    } else if [level] == "INFO" {
      mutate { 
        add_tag => ["info"]
        add_field => { "severity" => "low" }
      }
    } else if [level] == "DEBUG" {
      mutate { 
        add_tag => ["debug"]
        add_field => { "severity" => "trace" }
      }
    }
    
    # 특정 클래스/패키지별 분류
    if [class] {
      if [class] =~ /.*Controller.*/ {
        mutate { add_tag => ["controller", "web-layer"] }
      } else if [class] =~ /.*Service.*/ {
        mutate { add_tag => ["service", "business-layer"] }
      } else if [class] =~ /.*Repository.*/ {
        mutate { add_tag => ["repository", "data-layer"] }
      } else if [class] =~ /.*Security.*/ {
        mutate { add_tag => ["security", "auth-layer"] }
      } else if [class] =~ /.*Saga.*/ {
        mutate { add_tag => ["saga", "transaction-layer"] }
      }
    }
    
    # 에러 메시지에서 예외 정보 추출
    if "error" in [tags] and [log_message] {
      grok {
        match => { 
          "log_message" => "(?<exception_class>[a-zA-Z0-9\.]+Exception): (?<exception_message>.*?)(\n|\r\n|\r|$)" 
        }
        tag_on_failure => ["_no_exception_info"]
      }
    }
    
    # HTTP 요청 정보 추출 (컨트롤러 로그에서)
    if "controller" in [tags] and [log_message] {
      grok {
        match => { 
          "log_message" => "(?<http_method>GET|POST|PUT|DELETE|PATCH) (?<request_uri>/[^\s]*)" 
        }
        tag_on_failure => ["_no_http_info"]
      }
    }
  }
  
  # 공통 메타데이터 추가
  mutate {
    add_field => { 
      "application" => "algoreport"
      "environment" => "${APP_ENV:development}"
      "version" => "${APP_VERSION:1.0.0}"
      "host_ip" => "%{[@metadata][input][tcp][source]}"
    }
    # 불필요한 필드 제거
    remove_field => [ "host", "agent", "ecs", "input", "tags" ]
  }
  
  # 로그 메시지 길이 제한 (성능 최적화)
  if [log_message] {
    truncate {
      length_bytes => 8192  # 8KB로 제한
    }
  }
}

output {
  # Elasticsearch로 전송 (일별 인덱스)
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "algoreport-logs-%{+YYYY.MM.dd}"
    template_name => "algoreport-logs"
    template => "/usr/share/logstash/templates/algoreport-logs-template.json"
    template_overwrite => true
    
    # 문서 ID 설정 (중복 방지)
    document_id => "%{[@metadata][fingerprint]}"
    
    # 에러 처리
    retry_on_conflict => 3
    
    # 성능 최적화
    flush_size => 500
    idle_flush_time => 10
  }
  
  # 에러 로그는 별도 인덱스로 전송
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "algoreport-errors-%{+YYYY.MM.dd}"
      template_name => "algoreport-errors"
      template => "/usr/share/logstash/templates/algoreport-errors-template.json"
      template_overwrite => true
    }
  }
  
  # 개발 환경에서는 콘솔 출력 (디버깅용)
  if "${APP_ENV:development}" == "development" {
    stdout { 
      codec => rubydebug {
        metadata => false
      }
    }
  }
  
  # 심각한 에러는 파일로도 저장 (알림 연동용)
  if "alert-worthy" in [tags] {
    file {
      path => "/app/logs/alerts/critical-errors-%{+YYYY-MM-dd}.log"
      codec => json_lines
    }
  }
}

# Phase 2 확장을 위한 주석 처리된 출력
# 향후 비즈니스 데이터 처리 시 활성화

# # Kafka로 중요 이벤트 전송 (Phase 2)
# if "saga" in [tags] or "business-critical" in [tags] {
#   kafka {
#     bootstrap_servers => "kafka:9092"
#     topic_id => "application-events"
#     codec => json
#   }
# }